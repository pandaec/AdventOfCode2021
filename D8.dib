#!markdown

```
  0:      1:      2:      3:      4:
 aaaa    ....    aaaa    aaaa    ....
b    c  .    c  .    c  .    c  b    c
b    c  .    c  .    c  .    c  b    c
 ....    ....    dddd    dddd    dddd
e    f  .    f  e    .  .    f  .    f
e    f  .    f  e    .  .    f  .    f
 gggg    ....    gggg    gggg    ....

  5:      6:      7:      8:      9:
 aaaa    aaaa    aaaa    aaaa    aaaa
b    .  b    .  .    c  b    c  b    c
b    .  b    .  .    c  b    c  b    c
 dddd    dddd    ....    dddd    dddd
.    f  e    f  .    f  e    f  .    f
.    f  e    f  .    f  e    f  .    f
 gggg    gggg    ....    gggg    gggg


fbcad gcdfa   
cefabd cdfgeb cagedb 

0
1 ab
2
3 fbcad
4 eafb
5 cdfbe
6
7 dab
8 acedgfb
9

cdfeb fcadb cdfeb cdbaf
```

#!markdown

```
len 2 = 1
len 3 = 7
len 4 = 4
len 5 = 2 3 5
len 6 = 0 6 9

Step
Find 1,7,4 by distinct length
Find below by 4 - 1
 ....
b    .
b    .
 dddd
.    .
.    .
 ....

5 =  set {len = 5} match 4-1

5 and 1
 ....
.    .
.    .
 ....
.    f
.    f
 ....
3 = set {len = 5 | not 5} match 5&1
2 = {len = 5 | not 3 5}

0 = {len = 6 | not (4-1)}

3 - 5
 .... 
.    c
.    c
 .... 
.    .
.    .
 .... 

9 = {len = 6 | not 0} match 3-5
6 = {len = 6 | not 0 9}
```

#!fsharp

type State =  
    {   signal  : list<Set<char>>
        display : list<Set<char>>}

let entries = IO.File.ReadLines @"input\8.txt"
                |> Seq.map (fun line -> 
                        let arr  = line.Split '|'
                        let toSet = Seq.filter (not << String.IsNullOrEmpty)
                                        >> Seq.map (fun s -> s.ToCharArray() |> Set.ofArray)
                                        >> List.ofSeq
                        let inputSignals = arr[0].Split ' ' |> toSet
                                            
                        let displyDigits = arr[1].Split ' ' |> toSet
                        {signal = inputSignals; display = displyDigits})

let findDigitSignal (entry:State) = 
    let findSet f group = 
        group 
        |> List.filter f 
        |> List.head
        
    let {State.signal = signal; State.display = display;} = entry
    let lenGroup = List.groupBy Seq.length signal

    let one        = lenGroup |> List.find (fun (k,_) -> k = 2) |> snd |> List.head
    let seven      = lenGroup |> List.find (fun (k,_) -> k = 3) |> snd |> List.head
    let four       = lenGroup |> List.find (fun (k,_) -> k = 4) |> snd |> List.head
    let eight      = lenGroup |> List.find (fun (k,_) -> k = 7) |> snd |> List.head
    
    let _,lenFiveGrp = lenGroup |> List.find (fun (k,_) -> k = 5)
    let _,lenSixGrp  = lenGroup |> List.find (fun (k,_) -> k = 6)
    
    let fourSubOne = Set.difference four one
    
    // Solve len five group
    let five = lenFiveGrp |> findSet (fun set -> Set.isSubset fourSubOne set)

    let fiveAndOne = Set.intersect five one

    let three = (lenFiveGrp |> List.filter (fun set -> set <> five))
                |> findSet (fun set -> Set.isSubset fiveAndOne set)
    
    let two = lenFiveGrp |> findSet (fun set -> set <> five && set <> three)
    
    // Solve len six group
    let zero = lenSixGrp |> findSet (fun set -> not (Set.isSubset fourSubOne set))

    let threeSubFive =  Set.difference three five
    
    let nine = (lenSixGrp |> List.filter (fun set -> set <> zero))
                |> findSet (fun set -> Set.isSubset threeSubFive set)
    
    let six = lenSixGrp |> findSet (fun set -> set <> zero && set <> nine)

    // End solve pattern

    // Part B return
    display 
    |> List.map (fun digit -> 
                    match digit with 
                    | d when d = zero  -> "0"
                    | d when d = one   -> "1"
                    | d when d = two   -> "2"
                    | d when d = three -> "3"
                    | d when d = four  -> "4"
                    | d when d = five  -> "5"
                    | d when d = six   -> "6"
                    | d when d = seven -> "7"
                    | d when d = eight -> "8"
                    | d when d = nine  -> "9")

    // // Part A return
    // let partAPattern = [one;four;seven;eight]
    
    // display
    // |> List.filter (fun set -> List.contains set partAPattern)
    // |> List.length


// Part A Solution
entries 
|> Seq.map findDigitSignal
// |> Seq.sum
