#!fsharp

let TD6Input = "3,4,3,1,2"
let D6Input = "5,1,4,1,5,1,1,5,4,4,4,4,5,1,2,2,1,3,4,1,1,5,1,5,2,2,2,2,1,4,2,4,3,3,3,3,1,1,1,4,3,4,3,1,2,1,5,1,1,4,3,3,1,5,3,4,1,1,3,5,2,4,1,5,3,3,5,4,2,2,3,2,1,1,4,1,2,4,4,2,1,4,3,3,4,4,5,3,4,5,1,1,3,2,5,1,5,1,1,5,2,1,1,4,3,2,5,2,1,1,4,1,5,5,3,4,1,5,4,5,3,1,1,1,4,5,3,1,1,1,5,3,3,5,1,4,1,1,3,2,4,1,3,1,4,5,5,1,4,4,4,2,2,5,5,5,5,5,1,2,3,1,1,2,2,2,2,4,4,1,5,4,5,2,1,2,5,4,4,3,2,1,5,1,4,5,1,4,3,4,1,3,1,5,5,3,1,1,5,1,1,1,2,1,2,2,1,4,3,2,4,4,4,3,1,1,1,5,5,5,3,2,5,2,1,1,5,4,1,2,1,1,1,1,1,2,1,1,4,2,1,3,4,2,3,1,2,2,3,3,4,3,5,4,1,3,1,1,1,2,5,2,4,5,2,3,3,2,1,2,1,1,2,5,3,1,5,2,2,5,1,3,3,2,5,1,3,1,1,3,1,1,2,2,2,3,1,1,4,2"

let fishTank = D6Input.Split(",") |> Seq.map(int) |> List.ofSeq

#!fsharp

// naive solution
let rec update (tank:List<int>) turn =
    match turn with
    | 0 -> tank
    | _ -> (
        let zeroCount = tank |> List.filter (fun fish -> fish = 0) |> List.length
        let currentFish = tank |> List.map (fun fish -> if fish = 0 then 6 else fish - 1)
        let newTank = currentFish @ (List.replicate zeroCount 8)
        update newTank (turn-1)
    )
// Can't run B, require 32(int) * 26984457539(sample result) = 108GB
let ansA = update fishTank 8 |> List.length
// let ansB = update fishTank 256 |> List.length
ansA

#!fsharp

// Map should work also, Just want to try with list
let rec updateList (tank:List<int64>) turn = 
    match turn with
    | 0 -> tank
    | _ -> (
        let [zero;one;two;three;four;five;six;seven;eight] = tank
        let newTank = [one;two;three;four;five;six;seven + zero;eight;zero]
        updateList newTank (turn-1)
    )

let counts = fishTank |> List.countBy id |> List.map (fun (k,v) -> (k, int64 v))

let initTank = [0..8]
                |> List.map(fun i ->
                                let result = List.tryFind(fun (k,v) -> k = i) counts
                                match result with
                                | None -> 0L
                                | Some (_,count) -> count)

let listAnsA = updateList initTank 80 |> List.sum
let listAnsB = updateList initTank 256 |> List.sum
listAnsB
